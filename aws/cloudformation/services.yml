AWSTemplateFormatVersion: '2010-09-09'
Description: 'Agrifrika Dashboard - ECS Services'

Parameters:
  StackName:
    Type: String
    Description: Infrastructure stack name
    Default: agrifrika-infrastructure

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]

  ECRRepositoryURI:
    Type: String
    Description: ECR Repository URI for images

  BackendImageTag:
    Type: String
    Default: latest
    Description: Backend image tag

  FrontendImageTag:
    Type: String
    Default: latest
    Description: Frontend image tag

Resources:
  # Backend Service
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-backend
      Cluster: !ImportValue
        Fn::Sub: ${StackName}-ecs-cluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      PlacementStrategy:
        - Type: spread
          Field: instanceId
        - Type: spread
          Field: attribute:ecs.availability-zone
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !ImportValue
            Fn::Sub: ${StackName}-backend-tg
      HealthCheckGracePeriodSeconds: 120
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Frontend Service
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: BackendService
    Properties:
      ServiceName: !Sub ${AWS::StackName}-frontend
      Cluster: !ImportValue
        Fn::Sub: ${StackName}-ecs-cluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      PlacementStrategy:
        - Type: spread
          Field: instanceId
        - Type: spread
          Field: attribute:ecs.availability-zone
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !ImportValue
            Fn::Sub: ${StackName}-frontend-tg
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Backend Task Definition
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-backend
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !ImportValue
        Fn::Sub: ${StackName}-execution-role
      TaskRoleArn: !ImportValue
        Fn::Sub: ${StackName}-task-role
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${ECRRepositoryURI}/agrifrika-backend:${BackendImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENV
              Value: production
            - Name: DEBUG
              Value: "false"
            - Name: HOST
              Value: "0.0.0.0"
            - Name: PORT
              Value: "8000"
            - Name: AWS_SECRET_NAME
              Value: !ImportValue
                Fn::Sub: ${StackName}-secrets
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: ECS_CLUSTER_NAME
              Value: !ImportValue
                Fn::Sub: ${StackName}-ecs-cluster
            - Name: GOOGLE_SHEETS_CREDENTIALS_PATH
              Value: /app/config/credentials/google-sheets-new-credentials.json
            - Name: GOOGLE_ANALYTICS_CREDENTIALS_PATH
              Value: /app/config/credentials/google-analytics-credentials.json
          Secrets:
            - Name: BASECAMP_TOKEN
              ValueFrom: !Sub
                - "${SecretArn}:BASECAMP_TOKEN::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
            - Name: BASECAMP_ACCOUNT_ID
              ValueFrom: !Sub
                - "${SecretArn}:BASECAMP_ACCOUNT_ID::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
            - Name: BASECAMP_PROJECT_ID
              ValueFrom: !Sub
                - "${SecretArn}:BASECAMP_PROJECT_ID::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
            - Name: FACEBOOK_ACCESS_TOKEN
              ValueFrom: !Sub
                - "${SecretArn}:FACEBOOK_ACCESS_TOKEN::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
            - Name: FACEBOOK_PAGE_ID
              ValueFrom: !Sub
                - "${SecretArn}:FACEBOOK_PAGE_ID::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
            - Name: SECRET_KEY
              ValueFrom: !Sub
                - "${SecretArn}:SECRET_KEY::"
                - SecretArn: !ImportValue
                  Fn::Sub: ${StackName}-secrets
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${AWS::StackName}/backend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:8000/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          MountPoints:
            - SourceVolume: efs-storage
              ContainerPath: /app/data
              ReadOnly: false
      Volumes:
        - Name: efs-storage
          EfsVolumeConfiguration:
            FileSystemId: !ImportValue
              Fn::Sub: ${StackName}-efs
            TransitEncryption: ENABLED
            AuthorizationConfig:
              Iam: ENABLED

  # Frontend Task Definition
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-frontend
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !ImportValue
        Fn::Sub: ${StackName}-execution-role
      TaskRoleArn: !ImportValue
        Fn::Sub: ${StackName}-task-role
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub ${ECRRepositoryURI}/agrifrika-frontend:${FrontendImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: NGINX_PORT
              Value: "80"
            - Name: BACKEND_URL
              Value: !Sub
                - "https://${LoadBalancerDNS}"
                - LoadBalancerDNS: !ImportValue
                  Fn::Sub: ${StackName}-alb-dns
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${AWS::StackName}/frontend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost/ || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 30

  # Auto Scaling for Backend
  BackendAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Sub service/${AWS::StackName}-cluster/${AWS::StackName}-backend
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  BackendAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-backend-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref BackendAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 60.0
        ScaleOutCooldown: 600
        ScaleInCooldown: 900

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/backend
      RetentionInDays: 14

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/frontend
      RetentionInDays: 14

Outputs:
  BackendServiceArn:
    Description: Backend ECS Service ARN
    Value: !Ref BackendService

  FrontendServiceArn:
    Description: Frontend ECS Service ARN
    Value: !Ref FrontendService

  BackendTaskDefinitionArn:
    Description: Backend Task Definition ARN
    Value: !Ref BackendTaskDefinition

  FrontendTaskDefinitionArn:
    Description: Frontend Task Definition ARN
    Value: !Ref FrontendTaskDefinition
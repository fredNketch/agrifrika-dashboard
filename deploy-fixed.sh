#!/bin/bash

# Script de d√©ploiement corrig√© pour Agrifrika Dashboard
# Int√®gre toutes les corrections identifi√©es lors du debug

set -e

echo "üöÄ D√©ploiement Agrifrika Dashboard avec corrections appliqu√©es"

# Variables
ENVIRONMENT=${1:-production}
AWS_REGION=${2:-us-east-1}
KEY_PAIR_NAME=${3:-agrifrika-key}

echo "Environment: $ENVIRONMENT"
echo "Region: $AWS_REGION"
echo "Key Pair: $KEY_PAIR_NAME"

# Fonction pour cr√©er l'instance EC2
create_ec2_instance() {
    echo "üì¶ Cr√©ation de l'instance EC2..."

    # Utilise le script simple qui fonctionne
    ./aws/scripts/simple-ec2-deploy-fixed.sh

    echo "‚úÖ Instance EC2 cr√©√©e avec succ√®s"
}

# Fonction pour pr√©parer les fichiers corrig√©s
prepare_files() {
    echo "üîß Pr√©paration des fichiers avec corrections..."

    # V√©rifier que les scripts d'entrypoint sont dans backend/
    if [ ! -f "backend/docker-entrypoint.sh" ]; then
        echo "üìã Copie des scripts d'entrypoint..."
        cp docker-entrypoint.sh backend/
        cp aws/scripts/aws-entrypoint.sh backend/
    fi

    # Cr√©er les r√©pertoires de logs n√©cessaires
    mkdir -p logs/backend logs/nginx

    echo "‚úÖ Fichiers pr√©par√©s"
}

# Fonction pour d√©ployer l'application
deploy_application() {
    local instance_ip=$1

    echo "üö¢ D√©ploiement de l'application sur $instance_ip..."

    # Transf√©rer les fichiers essentiels
    echo "üì§ Transfert des fichiers de configuration..."
    scp -i "${KEY_PAIR_NAME}.pem" -o StrictHostKeyChecking=no -r \
        backend/ frontend/ config/ docker-compose.prod.yml nginx/ \
        ec2-user@$instance_ip:/home/ec2-user/agrifrika-dashboard/

    # D√©ployer avec Docker Compose
    echo "üê≥ D√©ploiement Docker Compose..."
    ssh -i "${KEY_PAIR_NAME}.pem" -o StrictHostKeyChecking=no ec2-user@$instance_ip \
        "cd /home/ec2-user/agrifrika-dashboard && \
         mkdir -p logs/backend logs/nginx && \
         docker-compose -f docker-compose.prod.yml up -d --build"

    echo "‚úÖ Application d√©ploy√©e"
}

# Fonction pour configurer SSL (apr√®s DNS)
setup_ssl() {
    local instance_ip=$1

    echo "üîí Configuration SSL Let's Encrypt..."

    ssh -i "${KEY_PAIR_NAME}.pem" -o StrictHostKeyChecking=no ec2-user@$instance_ip \
        "sudo mkdir -p /var/www/html && \
         sudo certbot certonly --webroot -w /var/www/html \
         -d dashboard.agrifrika.com --non-interactive --agree-tos \
         --email admin@agrifrika.com && \
         sudo cp /etc/letsencrypt/live/dashboard.agrifrika.com/fullchain.pem /home/ec2-user/agrifrika-dashboard/nginx/ssl/cert.pem && \
         sudo cp /etc/letsencrypt/live/dashboard.agrifrika.com/privkey.pem /home/ec2-user/agrifrika-dashboard/nginx/ssl/key.pem && \
         cd /home/ec2-user/agrifrika-dashboard && \
         docker-compose -f docker-compose.prod.yml restart nginx"

    echo "‚úÖ SSL configur√©"
}

# Fonction principale
main() {
    case "${1}" in
        "ssl")
            if [ -z "${2}" ]; then
                echo "Usage: $0 ssl <instance_ip>"
                exit 1
            fi
            setup_ssl "${2}"
            ;;
        "deploy")
            prepare_files
            create_ec2_instance
            ;;
        *)
            echo "Usage: $0 [deploy|ssl <instance_ip>]"
            echo "  deploy: Cr√©er l'instance et d√©ployer l'application"
            echo "  ssl <ip>: Configurer SSL sur l'instance existante"
            ;;
    esac
}

main "$@"